#!/usr/bin/env bash

username=
password=
domain=

base_dir="$( cd "$( dirname "$0" )" && pwd )"
source "$base_dir/global"

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_help() {
    printf 'Correct Usage: ./install -u [new-username] -p [access-password] -d [domain]\n'
    exit 1
}

validate_input() {
    while :; do
        case $1 in
            -h|--help)
                show_help
                exit
                ;;
            -u)
                if [ "$2" ]; then
                    username=$2
                    shift
                else
                    die 'ERROR: "-u" requires a non-empty option argument.'
                fi
                ;;
            -p)
                if [ "$2" ]; then
                    password=$2
                    shift
                else
                    die 'ERROR: "-p" requires a non-empty option argument.'
                fi
                ;;
            -d)
                if [ "$2" ]; then
                    domain=$2
                    shift
                else
                    die 'ERROR: "-d" requires a non-empty option argument.'
                fi
                ;;
            --)
                shift
                break
                ;;
            -?*)
                printf 'WARN: Unknown option: %s\n' "$1" >&2
                show_help
                exit
                ;;
            *)
                break
        esac
        shift
    done

    if [[ -z "$username" ]]; then
        printf 'ERROR: "-u" is a required argument.\n'
        show_help
        exit
    fi

    if [[ -z "$password" ]]; then
        printf 'ERROR: "-p" is a required argument.\n'
        show_help
        exit
    fi

    if [[ -z "$domain" ]]; then
        printf 'ERROR: "-d" is a required argument.\n'
        show_help
        exit
    fi
}

create_user_if_not_exists() {
    if id "$username" >/dev/null 2>&1; then
        printf 'user already exists\n'
    else
        adduser "$username"
        printf 'user %s created\n' "$username"
    fi
}

add_user_to_sudo_if_not_already_present() {
    if id -nG "$username" | grep -qw sudo; then
        printf 'user already belongs to sudo\n'
    else
        usermod -aG sudo "$username"
        printf 'user %s added to sudo\n' "$username"
    fi
}

setup_non_root_user() {
    create_user_if_not_exists
    add_user_to_sudo_if_not_already_present

    if id -nG "$username" | grep -qw sudo; then
        printf 'user is successfully setup\n'
    else
        die 'ERROR: unable to setup the non root user'
    fi
}

setup_ssh_if_not_done_previously() {
    user_ssh_directory=/home/"$username"/.ssh
    if [ ! -d "$user_ssh_directory" ]; then
        rsync --archive --chown="$username":"$username" ~/.ssh /home/"$username"
        printf 'user ssh setup finished\n'
    fi
}

download_and_unpack_code_server() {
    mkdir -p /tmp/code-server
    cd /tmp/code-server
    if [ ! -f $code_server_tarball_name ]; then
        wget https://github.com/coder/code-server/releases/download/v$code_server_version/$code_server_tarball_name
        printf "code server tarball downloaded\n"
    fi
    tar -xzvf $code_server_tarball_name
    printf "code server tarball unpacked\n"
}

copy_and_symlink_code_server() {
    sudo cp -r $code_server_folder_name /usr/lib/code-server
    sudo ln -sf /usr/lib/code-server/bin/code-server /usr/bin/code-server
    printf "code server setup finished\n"
}

create_user_data_dir_for_code_server() {
    sudo mkdir -p /var/lib/code-server
    sudo chown -R coder /var/lib/code-server
}

delete_code_server_installation_files() {
    rm -rf /tmp/code-server/$code_server_folder_name
}

download_and_install_nginx() {
    if sudo dpkg -l | grep -q nginx; then
      printf "NGINX already installed\n"
    else
      sudo apt-get install nginx
      printf "NGINX installed successfully\n"
    fi
}

setup_systemd_service_for_code_server() {
    code_server_service_file="`cat ${base_dir}/code-server.service`"
    printf "$code_server_service_file" "$password" "$username" > $code_server_target_service_file
}

setup_code_server_config_for_nginx() {
    nginx_conf_file="`cat ${base_dir}/code-server.conf`"
    printf "$nginx_conf_file" "$domain" > $nginx_target_conf_file
    sudo ln -s /etc/nginx/sites-available/code-server.conf /etc/nginx/sites-enabled/code-server.conf
}

setup_ssl() {
    sudo apt-get install certbot python3-certbot-nginx -y
    sudo certbot --nginx -d "$domain"
}

start_services() {
    sudo systemctl start code-server
    sudo systemctl enable code-server
    sudo systemctl start nginx
    sudo systemctl enable nginx
    systemctl daemon-reload
    # incase password was changed
    systemctl restart code-server
}

validate_input "$@"

setup_non_root_user
setup_ssh_if_not_done_previously

download_and_unpack_code_server
copy_and_symlink_code_server
create_user_data_dir_for_code_server
delete_code_server_installation_files
download_and_install_nginx
setup_code_server_config_for_nginx
setup_systemd_service_for_code_server
setup_ssl
start_services

printf 'success %s %s %s\n' "$username" "$password" "$domain"
